{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","emiTenure","emiAmount","interestRate","amount","currency","numPayments","principalAmount","principalCurrency","_this2","console","log","setTimeout","asyncToGenerator","regenerator_default","a","mark","_callee","post","content","wrap","_context","prev","next","fetch","concat","sent","json","setState","monthlyPayment","principal","stop","_this3","react_default","createElement","className","class","uk-navbar","uk-grid","js_default","name","maxValue","minValue","value","onChange","Math","round","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.877ba435.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport InputRange from \"react-input-range\";\nimport \"react-input-range/lib/css/index.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      emiTenure: \"6\",\n      emiAmount: \"500\",\n      interestRate: \"00\",\n      amount: \"00\",\n      currency: \"00\",\n      numPayments: \"00\",\n      principalAmount: \"00\",\n      principalCurrency: \"00\"\n    };\n  }\n  componentDidUpdate() {\n    \n    console.log(this.state.emiAmount, this.state.emiTenure);\n    setTimeout((async () => {\n      const post = await fetch(\n        `https://ftl-frontend-test.herokuapp.com/interest?amount=${\n          this.state.emiAmount\n        }&numMonths=${this.state.emiTenure}`\n      );\n      const content = await post.json();\n      this.setState({\n        interestRate: content.interestRate,\n        amount: content.monthlyPayment.amount,\n        currency: content.monthlyPayment.currency,\n        numPayments: content.numPayments,\n        principalAmount: content.principal.amount,\n        principalCurrency: content.principal.currency\n      });\n    })(),5000);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <nav class=\"uk-navbar-container\" uk-navbar>\n          <div class=\"uk-navbar-left\">\n            <ul class=\"uk-navbar-nav\">\n              <li>\n                <a className=\"nav-title\" >FullThrottle Labs</a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        <div uk-grid=\"true\">\n          <div className=\"container-left\">\n            <div class=\"uk-card uk-card1 uk-card-default uk-card-body uk-width-1-2@m\">\n            <h2>EMI Loan Calculator</h2>\n              <h3 class=\"uk-card-title\"><b>Enter Details here</b></h3>\n              <h3>Enter loan Amount</h3>\n              <form>\n                <InputRange\n                  name=\"emiAmount\"\n                  maxValue={5000}\n                  minValue={500}\n                  value={this.state.emiAmount}\n                  onChange={emiAmount => this.setState({ emiAmount })}\n                />\n                <h3>Enter loan Tenure</h3>\n                <InputRange\n                  name=\"emiTenure\"\n                  maxValue={24}\n                  minValue={6}\n                  value={this.state.emiTenure}\n                  onChange={emiTenure => this.setState({ emiTenure })}\n                />\n              </form>\n            </div>\n          </div>\n          <div className=\"container-right\">\n            <div\n              class=\"uk-grid-divider uk-card2 uk-child-width-expand@s uk-grid-match\"\n              uk-grid=\"true\"\n            >\n              <div class=\"uk-card2\">\n                <div class=\"uk-card uk-card-default uk-card-body\">\n                  <h3>Interest</h3>\n                  <h2>{Math.round(this.state.interestRate * 100)}%</h2>\n                </div>\n              </div>\n              <div class=\"uk-card2\">\n                <div class=\"uk-card uk-card-default uk-card-body\">\n                  <h3>Monthly Payment</h3>\n                  <p>\n                    <b>Amount: </b>\n                    {this.state.amount}\n                  </p>\n                  <p>\n                    <b>Currency: </b>\n                    {this.state.currency}\n                  </p>\n                </div>\n              </div>\n              <div class=\"uk-card2\">\n                <div class=\"uk-card uk-card-default uk-card-body\">\n                  <h3> Payments</h3>\n                  <h2>{this.state.numPayments} Months</h2>\n                </div>\n              </div>\n              <div class=\"uk-card2\">\n                <div class=\"uk-card uk-card-default uk-card-body\">\n                  <h3> Amount</h3>\n                  <p>\n                    <b>Amount: </b>\n                    {this.state.principalAmount}\n                  </p>\n                  <p>\n                    <b>Currency: </b>\n                    {this.state.principalCurrency}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}